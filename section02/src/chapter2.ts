// [ 배열 타입 ]
//  변수명 뒤에 타입 주석의 시작을 의미하는 콜론(:)을 작성한 다음 배열요소타입[] 형식으로 배열 타입을 정의함
let numArr: number[] = [1, 2, 3];
let strArr: string[] = ["hello", "im", "winterlood"]; // 문자열을 담는 배열의 타입 정의
let boolArr: Array<boolean> = [true, false, true]; // 제네릭 방식

// [ 배열에 들어가는 요소들의 타입이 다양할 경우 ]
// let multiArr = [1, "hello"]; -> 이런 배열일 경우는 아래와 같이 유니온 타입으로 작성
let multiArr: (number | string)[] = [1, "hello"];

// [ 다차원 배열의 타입을 정의하는 방법 ]
let doubleArr: number[][] = [
  [1, 2, 3],
  [4, 5],
];

// [ 튜플 타입 ] - 튜플 : 길이와 타입이 고정된 배열
let tup1: [number, number] = [1, 2];
let tup2: [number, string, boolean] = [1, "hello", true];
// 튜플은 기본적으로 배열이므로 배열메서드인 push, pop을 이용해서 고정된 길이를 무시하고 요소를 추가 삭제가 가능함
// 따라서 요소를 추가하거나 삭제하는 등의 연산을 할 때는 주의 요함!

// [ 그럼 튜플을 왜 쓰는 걸까? ]
// 회원 정보를 2차원 배열로 저장하는 상황을 가정함
const users = [
  ["이정환", 1],
  ["이아무개", 2],
  ["김아무개", 3],
  ["박아무개", 4],
  [5, "조아무개"], // <- 순서를 잘 못 배치해 요소를 새로 추가할 경우 js에선 확인 불가능 but ts에선 오류가 발생함! -> 실수 바로잡기 가능
];

// const users: [string, number][] = [
//   ["이정환", 1],
//   ["이아무개", 2],
//   ["김아무개", 3],
//   ["박아무개", 4],
//   [5, "조아무개"], // 오류 발생 -> 실수 바로잡기 가능!
// ];
